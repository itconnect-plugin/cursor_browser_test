name: Playwright Tests

# 트리거 조건
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 수동 실행 가능

# 환경 변수
env:
  NODE_VERSION: '18'

jobs:
  # 테스트 실행
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    steps:
    # 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Node.js 설정
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    # 의존성 설치
    - name: Install dependencies
      run: npm ci
      
    # Playwright 브라우저 설치
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
    # 테스트 실행
    - name: Run Playwright tests
      run: npm run test
      
    # 테스트 결과 업로드
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
        
    # 스크린샷 업로드
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-screenshots
        path: test-results/screenshots/
        retention-days: 30
        
    # 테스트 결과 JSON 업로드
    - name: Upload test results JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-json
        path: test-results/results.json
        retention-days: 30

  # 브라우저별 테스트 (선택적)
  test-browsers:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
      
    - name: Run Playwright tests on ${{ matrix.browser }}
      run: npx playwright test --project=${{ matrix.browser }}
      
    - name: Upload ${{ matrix.browser }} test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: playwright-report/
        retention-days: 30

  # 모바일 테스트
  test-mobile:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        device: [Mobile Chrome, Mobile Safari]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
    - name: Run Playwright tests on ${{ matrix.device }}
      run: npx playwright test --project="${{ matrix.device }}"
      
    - name: Upload ${{ matrix.device }} test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.device }}
        path: playwright-report/
        retention-days: 30

  # 성능 테스트 (선택적)
  performance-test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
      
    - name: Run performance tests
      run: npx playwright test --project=chromium --grep="performance"
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: test-results/
        retention-days: 30

  # 보안 스캔 (선택적)
  security-scan:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      run: npx audit-ci --config audit-ci.json || true
